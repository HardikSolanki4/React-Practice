{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredComment","current","value","commentData","text","quoteId","quotesId","className","classes","form","onSubmit","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","commentNode","useState","isAddingComment","setIsAddingComment","getAllComments","loadedCommentLists","data","LoadingSpinner","length","loadLatestComment","useCallback","onClick","HighlightedQuote","quote","author","QuoteDetails","params","useParams","match","useRouteMatch","getSingleQuote","loadSingleQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.52d802c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useEffect, useRef } from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../hooks/use-http';\nimport { addComment } from '../lib/api';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredComment = commentTextRef.current.value;\n    // optional: Could validate here\n    // send comment to server\n    sendRequest({\n      commentData: { text: enteredComment },\n      quoteId: props.quotesId,\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react';\nimport useHttp from '../hooks/use-http';\nimport { getAllComments } from '../lib/api';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = ({ quotesId }) => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const {\n    sendRequest,\n    status,\n    data: loadedCommentLists,\n  } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quotesId);\n  }, [sendRequest, quotesId]);\n\n  let commentNode;\n\n  if (status === 'pending') {\n    commentNode = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (\n    status === 'completed' &&\n    loadedCommentLists.length > 0 &&\n    loadedCommentLists\n  ) {\n    commentNode = <CommentsList comments={loadedCommentLists} />;\n  }\n\n  if (\n    status === 'completed' &&\n    (!loadedCommentLists || loadedCommentLists.length === 0)\n  ) {\n    commentNode = <div className='centered focused'>No Comment Yet!</div>;\n  }\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const loadLatestComment = useCallback(() => {}, []);\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          onAddedComment={loadLatestComment}\n          quotesId={quotesId}\n        />\n      )}\n      {commentNode}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from 'react';\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\nimport Comments from '../components/comments/Comments';\nimport useHttp from '../components/hooks/use-http';\nimport { getSingleQuote } from '../components/lib/api';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nconst QuoteDetails = () => {\n  const params = useParams();\n  const match = useRouteMatch();\n\n  const { quotesId } = params;\n\n  const {\n    status,\n    data: loadSingleQuote,\n    error,\n    sendRequest,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(quotesId);\n  }, [sendRequest, quotesId]);\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className='centered focused'>{error}</div>;\n  }\n\n  if (!loadSingleQuote.text || !loadSingleQuote.author) {\n    return <div className='centered focused'>No Quotes Found</div>;\n  }\n\n  return (\n    <div>\n      <HighlightedQuote\n        text={loadSingleQuote.author}\n        author={loadSingleQuote.text}\n      />\n      <Route path={match.path} exact>\n        <div className='centered'>\n          <Link className='btn--flat' to={`${match.url}/comment`}>\n            Load Comment\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.url}/comment`}>\n        <Comments quotesId={quotesId}/>\n      </Route>\n    </div>\n  );\n};\n\nexport default QuoteDetails;\n"],"sourceRoot":""}